package com.example.marta.battleorganizer_v1.Utils;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHARACTER".
*/
public class CharacterDao extends AbstractDao<Character, Long> {

    public static final String TABLENAME = "CHARACTER";

    /**
     * Properties of entity Character.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ImagePath = new Property(1, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Kp = new Property(3, int.class, "kp", false, "KP");
        public final static Property KpNp = new Property(4, int.class, "kpNp", false, "KP_NP");
        public final static Property KpDot = new Property(5, int.class, "kpDot", false, "KP_DOT");
        public final static Property BaseInitiative = new Property(6, int.class, "baseInitiative", false, "BASE_INITIATIVE");
        public final static Property Type = new Property(7, int.class, "type", false, "TYPE");
        public final static Property IsChecked = new Property(8, boolean.class, "isChecked", false, "IS_CHECKED");
    }


    public CharacterDao(DaoConfig config) {
        super(config);
    }
    
    public CharacterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHARACTER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IMAGE_PATH\" TEXT," + // 1: imagePath
                "\"NAME\" TEXT," + // 2: name
                "\"KP\" INTEGER NOT NULL ," + // 3: kp
                "\"KP_NP\" INTEGER NOT NULL ," + // 4: kpNp
                "\"KP_DOT\" INTEGER NOT NULL ," + // 5: kpDot
                "\"BASE_INITIATIVE\" INTEGER NOT NULL ," + // 6: baseInitiative
                "\"TYPE\" INTEGER NOT NULL ," + // 7: type
                "\"IS_CHECKED\" INTEGER NOT NULL );"); // 8: isChecked
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHARACTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Character entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(2, imagePath);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getKp());
        stmt.bindLong(5, entity.getKpNp());
        stmt.bindLong(6, entity.getKpDot());
        stmt.bindLong(7, entity.getBaseInitiative());
        stmt.bindLong(8, entity.getType());
        stmt.bindLong(9, entity.getIsChecked() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Character entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(2, imagePath);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getKp());
        stmt.bindLong(5, entity.getKpNp());
        stmt.bindLong(6, entity.getKpDot());
        stmt.bindLong(7, entity.getBaseInitiative());
        stmt.bindLong(8, entity.getType());
        stmt.bindLong(9, entity.getIsChecked() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Character readEntity(Cursor cursor, int offset) {
        Character entity = new Character( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imagePath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // kp
            cursor.getInt(offset + 4), // kpNp
            cursor.getInt(offset + 5), // kpDot
            cursor.getInt(offset + 6), // baseInitiative
            cursor.getInt(offset + 7), // type
            cursor.getShort(offset + 8) != 0 // isChecked
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Character entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImagePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKp(cursor.getInt(offset + 3));
        entity.setKpNp(cursor.getInt(offset + 4));
        entity.setKpDot(cursor.getInt(offset + 5));
        entity.setBaseInitiative(cursor.getInt(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
        entity.setIsChecked(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Character entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Character entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Character entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
